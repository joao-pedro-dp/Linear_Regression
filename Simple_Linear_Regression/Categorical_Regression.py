'''
Formula da Regress√£o Linear Categ√≥rica:

Basicamente,a formula √© id√™ntica dicot√¥mica; no entanto, Deve-se criar colunas correspondentes √† quantidade de vari√°veis dummy a serem utilizadas, transformando os valores booleanos em 1 e 0 para us√°-los na f√≥rmula.

O valor final obtido pode parecer um pouco estranho, mas o objetivo principal, que eram os c√°lculos, foi alcan√ßado. 
Para resultados mais precisos, basta manter os c√°lculos e utilizar uma base de dados real, renomeando as colunas conforme necess√°rio para corresponder √†s usadas no c√≥digo e realizar os testes. 
No entanto, como mencionado, meu objetivo foi atingido, ent√£o vou encerrar por aqui.

Y = Œ≤0 + Œ≤1 * D1 + Œ≤2 * D2

Onde:
Y: √© o pre√ßo da casa (vari√°vel dependente).
D1: 1 se a observa√ß√£o √© de n√≠vel "m√©dio" e D1 = 0 caso contr√°rio.
D2: 1 se a observa√ß√£o √© de n√≠vel "alto" e D2 = 0 caso contr√°rio.
A categoria "baixo" ser√° o grupo de refer√™ncia (ou seja, quando D1 e D2 = 0).
ùõΩ0: √© o intercepto (o pre√ßo m√©dio quando D = 0, ou seja, "Ruim").
ùõΩ1: √© o coeficiente da vari√°vel dummy (quanto o pre√ßo muda quando D1 = 1, ou seja, "M√©dio").
ùõΩ2: √© o coeficiente da vari√°vel dummy (quanto o pre√ßo muda quando D2 = 1, ou seja, "Alto").

Œ≤1 = (‚àë(Di1 - ŒºD1) * (Yi - ŒºY)) / (‚àë(Di1 - D1)^2)

Œ≤2 = (‚àë(Di2 - ŒºD2) * (Yi - ŒºY)) / (‚àë(Di2 - D2)^2)

Onde:
Di: s√£o os valores da vari√°vel dummy.
Yi: s√£o os valores da vari√°vel dependente (pre√ßo).
ŒºD: √© a m√©dia de D.
ŒºY: √© a m√©dia de Y.

Œ≤0 = ŒºY - Œ≤1 * ŒºD1 - Œ≤2 * ŒºD2

Onde:
ŒºD: √© a m√©dia de D.
ŒºY: √© a m√©dia de Y.

MAE = (1/M) * Œ£ |Yi - ≈∂i|
MSE = (1/M) * Œ£ (Yi - ≈∂i)^2
RMSE = sqrt(MSE)
RMSE = sqrt( (1/M) * Œ£ (Yi - ≈∂i)^2 )
R¬≤ = 1 - (Œ£ (Yi - ≈∂i)^2 / Œ£ (Yi - ŒºY)^2)

Onde:

M: √© o n√∫mero de observa√ß√µes,
Yi: s√£o os valores reais,
≈∂i: s√£o os valores previstos pelo modelo.
'''

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

houses = [{"class": "Low", "price": 240000},{"class": "Low", "price": 320000},{"class": "Low", "price": 400000},
        {"class": "Low", "price": 485000},{"class": "Middle", "price": 550000},{"class": "Middle", "price": 625000},
        {"class": "Middle", "price": 700000},{"class": "Middle", "price": 775000},{"class": "Middle", "price": 850000},
        {"class": "Middle", "price": 925000},{"class": "Middle", "price": 1000000},{"class": "High", "price": 1075000},
        {"class": "High", "price": 1150000},{"class": "High", "price": 1225000},{"class": "High", "price": 1300000},
        {"class": "High", "price": 1375000},{"class": "High", "price": 1450000},{"class": "High", "price": 1525000},
        {"class": "High", "price": 1600000},{"class": "High", "price": 1800000},{"class": "High", "price": 2000000}]

df = pd.DataFrame(houses)

# Converting the 'class' column into new boolean dummy variable columns.
df.loc[df['class'] != "Middle", 'D1'] = 0
df.loc[df['class'] == "Middle", 'D1'] = 1
df.loc[df['class'] != "High", 'D2'] = 0
df.loc[df['class'] == "High", 'D2'] = 1

# Obtaining the D1 values to use in the Œ≤1 formula
mean_D1 = np.mean(df['D1'])
Di_meanD1= df['D1'] - mean_D1
mean_Y1 = np.mean(df['price'])
Yi1 = df['price']
mean_Y_Yi1 = Yi1 - mean_Y1
sum_Di1_meanD1_mean_Y_Yi = np.sum(Di_meanD1 * mean_Y_Yi1)
squared_sum_Di1_meanD1 = np.sum(Di_meanD1**2)

Œ≤1 = (sum_Di1_meanD1_mean_Y_Yi / squared_sum_Di1_meanD1)

# Obtaining the D2 values to use in the Œ≤2 formula
mean_D2 = np.mean(df['D2'])
Di_meanD2= df['D2'] - mean_D2
mean_Y2 = np.mean(df['price'])
Yi2 = df['price']
mean_Y_Yi2 = Yi2 - mean_Y2
sum_Di2_meanD2_mean_Y_Yi = np.sum(Di_meanD2 * mean_Y_Yi2)
squared_sum_Di2_meanD2 = np.sum(Di_meanD2**2)

Œ≤2 = (sum_Di2_meanD2_mean_Y_Yi / squared_sum_Di2_meanD2)

Œ≤0 = (mean_Y1 - Œ≤1 * mean_D1 - Œ≤2 * mean_D2)

# Calculating errors
df['predict_price'] = Œ≤0 + Œ≤1 * df['D1'] + Œ≤2 * df['D2']
MAE = np.mean(np.abs(df['price'] - df['predict_price']))
MSE = np.mean((df['price'] - df['predict_price']) ** 2)
RMSE = np.sqrt(MSE)
SSE = sum((df['price'] - df['predict_price']) ** 2)
SST = sum((df['price'] - mean_Y1) ** 2)
R2 = 1 - (SSE / SST)

# The input receives a rating (D) using a basic if statement, because the objective is linear regression.
D = int(input("Enter the class of the house for which you want to know the price (0 - Low, 1 - Middle, 2 - High): "))

D1 = 1 if D == 1 else 0
D2 = 1 if D == 2 else 0

# Calculating the approximate price of the house
Y = Œ≤0 + Œ≤1 * D1 + Œ≤2 * D2
print(f"RMSE: {RMSE}")
print(f"R^2: {R2}")
print(f"The approximate price of the house with a class {D} is: R${Y}")

# Linear regression graph with errors

# Adding the data points 
plt.figure(figsize=(10,5))
plt.scatter(df['D1'] + 2 * df['D2'], df['price'], label="Real data", color="blue")  
plt.plot(df['D1'] + 2 * df['D2'], df['predict_price'], label="Categorical Linear Regression", color="red")  

# Adding line with errors
for i in range(len(df)):
    plt.vlines(x=df['D1'][i] + 2 * df['D2'][i], ymin=df['predict_price'][i], ymax=df['price'][i], color='gray', linestyle='dotted')

# Adding the user's predicted point to the plot
plt.scatter(D, Y, color='green', s=200, label=f"Result {D}", edgecolors='black', zorder=5)  

plt.title("Simple Linear Regression on House Prices using Categorical Variables")
plt.xlabel("Class")
plt.ylabel("Price")
plt.legend()
plt.show()

