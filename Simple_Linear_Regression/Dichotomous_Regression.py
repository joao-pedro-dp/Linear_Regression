'''
Formula da Regress√£o Linear Dicot√¥mica:

Basicamente,a formula √© quase id√™ntica √† num√©rica; no entanto, deve-se criar uma coluna transformando os valores booleanos em 1 e 0 para us√°-los na f√≥rmula.

Y = Œ≤0 + Œ≤1 * D 

Onde:
Y: √© o pre√ßo da casa (vari√°vel dependente).
D: √© a vari√°vel dicot√¥mica (0 ou 1).
ùõΩ0: √© o intercepto (o pre√ßo m√©dio quando D = 0, ou seja, "Ruim").
ùõΩ1: √© o coeficiente da vari√°vel dummy (quanto o pre√ßo muda quando D = 1, ou seja, "Bom").

Œ≤1 = (‚àë(Di - ŒºD) * (Yi - ŒºY)) / (‚àë(Di - D)^2)

Onde:
Di: s√£o os valores da vari√°vel dummy.
Yi: s√£o os valores da vari√°vel dependente (pre√ßo).
ŒºD: √© a m√©dia de D.
ŒºY: √© a m√©dia de Y.

Œ≤0 = ŒºY - Œ≤1 * ŒºD

Onde:
B1: √© a Formula de cima
ŒºD: √© a m√©dia de D.
ŒºY: √© a m√©dia de Y.

MAE = (1/M) * Œ£ |Yi - ≈∂i|
MSE = (1/M) * Œ£ (Yi - ≈∂i)^2
RMSE = sqrt(MSE)
RMSE = sqrt( (1/M) * Œ£ (Yi - ≈∂i)^2 )
R¬≤ = 1 - (Œ£ (Yi - ≈∂i)^2 / Œ£ (Yi - ŒºY)^2)

Onde:

M: √© o n√∫mero de observa√ß√µes,
Yi: s√£o os valores reais,
≈∂i: s√£o os valores previstos pelo modelo.
'''

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

houses = [{"rating": "Bad", "price": 240000},{"rating": "Good", "price": 320000},{"rating": "Bad", "price": 400000},
        {"rating": "Good", "price": 485000},{"rating": "Bad", "price": 550000},{"rating": "Good", "price": 625000},
        {"rating": "Bad", "price": 700000},{"rating": "Good", "price": 775000},{"rating": "Good", "price": 850000},
        {"rating": "Good", "price": 925000},{"rating": "Good", "price": 1000000},{"rating": "Bad", "price": 1075000},
        {"rating": "Good", "price": 1150000},{"rating": "Bad", "price": 1225000},{"rating": "Good", "price": 1300000},
        {"rating": "Bad", "price": 1375000},{"rating": "Good", "price": 1450000},{"rating": "Bad", "price": 1525000},
        {"rating": "Good", "price": 1600000},{"rating": "Good", "price": 1800000},{"rating": "Good", "price": 2000000}
        ]

df = pd.DataFrame(houses)

# Converting the 'rating' column into new boolean dummy variable column.
df.loc[df['rating'] == "Bad", 'D'] = 0
df.loc[df['rating'] == "Good", 'D'] = 1

# Obtaining the values to use in the Œ≤1 and Œ≤0 formula:
mean_D = np.mean(df['D'])
Di_meanD= df['D'] - mean_D
mean_Y = np.mean(df['price'])
Yi = df['price']
mean_Y_Yi = Yi - mean_Y
sum_Di_meanD_mean_Y_Yi = np.sum(Di_meanD * mean_Y_Yi)
squared_sum_Di_meanD = np.sum(Di_meanD**2)

Œ≤1 = (sum_Di_meanD_mean_Y_Yi / squared_sum_Di_meanD)

Œ≤0 = (mean_Y - Œ≤1 * mean_D)

# Calculating errors
df['predict_price'] = Œ≤0 + Œ≤1 * df['D']
MAE = np.mean(np.abs(df['price'] - df['predict_price']))
MSE = np.mean((df['price'] - df['predict_price']) ** 2)
RMSE = np.sqrt(MSE)
SSE = sum((df['price'] - df['predict_price']) ** 2)
SST = sum((df['price'] - mean_Y) ** 2)
R2 = 1 - (SSE / SST)

# Input receives the user's rating (D)
D = int(input("Enter the rating of the house for which you want to know the price (0: 'Bad' and 1: 'Good'): "))

# Calculating the approximate price of the house with user input
Y = Œ≤0 + Œ≤1 * D

print(f"RMSE: {RMSE}")
print(f"R^2: {R2}")
print(f"The approximate price of the house with a rating of {D} is: R${Y}")

# Linear regression graph with errors

# Adding the data points 
plt.figure(figsize=(10,5))
plt.scatter(df['D'], df['price'], label="Real data", color="blue")  
plt.plot(df['D'], df['predict_price'], label="Dichotomous Linear Regression", color="red")  

# Adding line with errors
for i in range(len(df)):
    plt.vlines(x=df['D'][i], ymin=df['predict_price'][i], ymax=df['price'][i], color='gray', linestyle='dotted')

# Adding the user's predicted point to the plot
plt.scatter(D, Y, color='green', s=200, label=f"Result {D}", edgecolors='black', zorder=5)  

plt.title("Simple Linear Regression on House Prices using Dichotomous Variables")
plt.xlabel("Rating")
plt.ylabel("Price")
plt.legend()
plt.show()
